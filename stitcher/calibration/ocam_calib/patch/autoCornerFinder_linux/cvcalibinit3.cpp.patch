33c33,34
< #include "cvcalibinit3.h"
---
> #include <opencv.hpp>
> #include <opencv2/core/internal.hpp>
111c112
< 									    cv::Size pattern_size );
---
> 									    CvSize pattern_size );
121c122
< int cvFindChessboardCorners3(const void* arr, CvSize pattern_size,
---
> int cvFindChessboardCorners3( const void* arr, CvSize pattern_size,
125,140c126,579
< 	std::vector<cv::Point2f> point_buf;
< 	cv::Mat image_color = cv::cvarrToMat(arr);
< 	cv::Mat image;
< 	cv::cvtColor(image_color, image, cv::COLOR_BGR2GRAY);
< 	int chessBoardFlags = cv::CALIB_CB_ADAPTIVE_THRESH + cv::CALIB_CB_NORMALIZE_IMAGE;
< 
< 	bool found = cv::findChessboardCorners(image, pattern_size, point_buf, chessBoardFlags);
< 
< 	ofstream cornersX("cToMatlab/cornersX.txt");
< 	ofstream cornersY("cToMatlab/cornersY.txt");
< 
< 	double last_x = 0;
< 	for (size_t i = 0; i < point_buf.size(); ++i) {
< 		if (point_buf[i].x < last_x) {
< 			cornersX << "" << std::endl;
< 			cornersY << "" << std::endl;
---
> //START TIMER
> #if TIMER
> 	ofstream FindChessboardCorners2;
>     time_t  start_time = clock();
> #endif
> 
> 	// PART 0: INITIALIZATION
> 	//-----------------------------------------------------------------------
> 	// Initialize variables
> 	int flags					=  1;	// not part of the function call anymore!
> 	int max_count				=  0;
> 	int max_dilation_run_ID		= -1;
>     const int min_dilations		=  1;
>     const int max_dilations		=  6;
>     int found					=  0;
>     CvMat* norm_img				=  0;
>     CvMat* thresh_img			=  0;
> 	CvMat* thresh_img_save		=  0;
>     CvMemStorage* storage		=  0;
> 	
> 	CvCBQuad *quads				=  0;
> 	CvCBQuad **quad_group		=  0;
>     CvCBCorner *corners			=  0;
> 	CvCBCorner **corner_group	=  0;
> 	CvCBQuad **output_quad_group = 0;
> 	
>     // debug trial. Martin Rufli, 28. Ocober, 2008
> 	int block_size = 0;
> 
> 
> 	// Create error message file
> 	ofstream error("cToMatlab/error.txt");
> 
> 	
> 	// Set openCV function name and label the function start
>     CV_FUNCNAME( "cvFindChessBoardCornerGuesses2" );
>     __BEGIN__;
> 
> 
> 	// Further initializations
>     int quad_count, group_idx, dilations;
>     CvMat stub, *img = (CvMat*)arr;
> 
> 
> 	// Read image from input
>     CV_CALL( img = cvGetMat( img, &stub ));
> 
> 
> 	// Error handling, write error message to error.txt
>     if( CV_MAT_DEPTH( img->type ) != CV_8U || CV_MAT_CN( img->type ) == 2 )
> 	{
>         error << "Only 8-bit grayscale or color images are supported" << endl;
> 		error.close();
> 		return -1;
> 	}
>     if( pattern_size.width < 2 || pattern_size.height < 2 )
> 	{
>         error << "Pattern should have at least 2x2 size" << endl;
> 		error.close();
> 		return -1;
> 	}
> 	if( pattern_size.width > 127 || pattern_size.height > 127 )
> 	{
>         error << "Pattern should not have a size larger than 127 x 127" << endl;
> 		error.close();
> 		return -1;
> 	}
> 	/*
> 	if( pattern_size.width != pattern_size.height )
> 	{
>         error << "In this implementation only square sized checker boards are supported" << endl;
> 		error.close();
> 		return -1;
> 	}
> 	*/
> 	if( !out_corners )
> 	{
>         error << "Null pointer to corners encountered" << endl;
> 		error.close();
> 		return -1;
> 	}
> 
> 
> 	// Create memory storage
>     CV_CALL( storage = cvCreateMemStorage(0) );
>     CV_CALL( thresh_img = cvCreateMat( img->rows, img->cols, CV_8UC1 ));
> 	CV_CALL( thresh_img_save = cvCreateMat( img->rows, img->cols, CV_8UC1 ));
> 
> 
> 	// Image histogramm normalization and
> 	// BGR to Grayscale image conversion (if applicable)
> 	// MARTIN: Set to "false"
>     if( CV_MAT_CN(img->type) != 1 || (flags & CV_CALIB_CB_NORMALIZE_IMAGE) )
>     {
>         CV_CALL( norm_img = cvCreateMat( img->rows, img->cols, CV_8UC1 ));
> 
>         if( CV_MAT_CN(img->type) != 1 )
>         {
>             CV_CALL( cvCvtColor( img, norm_img, CV_BGR2GRAY ));
>             img = norm_img;
>         }
> 
>         if(false)
>         {
>             cvEqualizeHist( img, norm_img );
>             img = norm_img;
>         }
>     }
> 	
> // EVALUATE TIMER
> #if TIMER
> 	float time0_1 = (float) (clock() - start_time) / CLOCKS_PER_SEC;
> 	FindChessboardCorners2.open("timer/FindChessboardCorners2.txt", ofstream::app);
> 	FindChessboardCorners2 << "Time 0.1 for cvFindChessboardCorners2 was " << time0_1 << " seconds." << endl;
> #endif
> 
> 	// For image binarization (thresholding)
>     // we use an adaptive threshold with a gaussian mask
> 	// ATTENTION: Gaussian thresholding takes MUCH more time than Mean thresholding!
>     block_size = cvRound(MIN(img->cols,img->rows)*0.2)|1;
>     cvAdaptiveThreshold( img, thresh_img, 255, CV_ADAPTIVE_THRESH_GAUSSIAN_C, CV_THRESH_BINARY, block_size, 0 );
> 	cvCopy( thresh_img, thresh_img_save);
> 
> 
> 	// PART 1: FIND LARGEST PATTERN
> 	//-----------------------------------------------------------------------
> 	// Checker patterns are tried to be found by dilating the background and
> 	// then applying a canny edge finder on the closed contours (checkers).
> 	// Try one dilation run, but if the pattern is not found, repeat until
> 	// max_dilations is reached.
>     for( dilations = min_dilations; dilations <= max_dilations; dilations++ )
>     {
> 		// Calling "cvCopy" again is much faster than rerunning "cvAdaptiveThreshold"
> 		cvCopy( thresh_img_save, thresh_img);
> 		
> // EVALUATE TIMER
> #if TIMER
> 		float time0_2 = (float) (clock() - start_time) / CLOCKS_PER_SEC;
> 		FindChessboardCorners2 << "Time 0.2 for cvFindChessboardCorners2 was " << time0_2 << " seconds." << endl;
> #endif
> 
> //VISUALIZATION--------------------------------------------------------------
> #if VIS
>  		cvNamedWindow( "Original Image", 1 );
> 		cvShowImage( "Original Image", img);
> 		//cvSaveImage("pictureVis/OrigImg.png", img);
> 		cvWaitKey(0);
> #endif
> //END------------------------------------------------------------------------
> 
> 
> 		// MARTIN's Code
> 		// Use both a rectangular and a cross kernel. In this way, a more
> 		// homogeneous dilation is performed, which is crucial for small, 
> 		// distorted checkers. Use the CROSS kernel first, since its action
> 		// on the image is more subtle
> 		IplConvKernel *kernel1 = cvCreateStructuringElementEx(3,3,1,1,CV_SHAPE_CROSS,NULL);
> 		IplConvKernel *kernel2 = cvCreateStructuringElementEx(3,3,1,1,CV_SHAPE_RECT,NULL);
> 
>         if (dilations >= 1)
> 			cvDilate( thresh_img, thresh_img, kernel1, 1);
> 		if (dilations >= 2)
> 			cvDilate( thresh_img, thresh_img, kernel2, 1);
> 		if (dilations >= 3)
> 			cvDilate( thresh_img, thresh_img, kernel1, 1);
> 		if (dilations >= 4)
> 			cvDilate( thresh_img, thresh_img, kernel2, 1);
> 		if (dilations >= 5)
> 			cvDilate( thresh_img, thresh_img, kernel1, 1);
> 		if (dilations >= 6)
> 			cvDilate( thresh_img, thresh_img, kernel2, 1);
> 
> // EVALUATE TIMER
> #if TIMER
> 		float time0_3 = (float) (clock() - start_time) / CLOCKS_PER_SEC;
> 		FindChessboardCorners2 << "Time 0.3 for cvFindChessboardCorners2 was " << time0_3 << " seconds." << endl;
> #endif
> 
> //VISUALIZATION--------------------------------------------------------------
> #if VIS
> 		cvNamedWindow( "After adaptive Threshold (and Dilation)", 1 );
> 		cvShowImage( "After adaptive Threshold (and Dilation)", thresh_img);
> 		//cvSaveImage("pictureVis/afterDilation.png", thresh_img);
> 		cvWaitKey(0);
> #endif
> //END------------------------------------------------------------------------ 
>   
> 
>         // In order to find rectangles that go to the edge, we draw a white
> 		// line around the image edge. Otherwise FindContours will miss those 
> 		// clipped rectangle contours. The border color will be the image mean,
> 		// because otherwise we risk screwing up filters like cvSmooth()
>         cvRectangle( thresh_img, cvPoint(0,0), cvPoint(thresh_img->cols-1,
>                      thresh_img->rows-1), CV_RGB(255,255,255), 3, 8);
> 
> 
> 		// Generate quadrangles in the following function
> 		// "quad_count" is the number of cound quadrangles
>         CV_CALL( quad_count = icvGenerateQuads( &quads, &corners, storage, thresh_img, flags, dilations, true ));
>         if( quad_count <= 0 )
>             continue;
> 
> // EVALUATE TIMER
> #if TIMER
> 		float time0_4 = (float) (clock() - start_time) / CLOCKS_PER_SEC;
> 		FindChessboardCorners2 << "Time 0.4 for cvFindChessboardCorners2 was " << time0_4 << " seconds." << endl;
> #endif
> 
> //VISUALIZATION--------------------------------------------------------------
> #if VIS
>   		cvNamedWindow( "all found quads per dilation run", 1 );
> 		IplImage* imageCopy2 = cvCreateImage( cvGetSize(thresh_img), 8, 1 );
> 		IplImage* imageCopy22 = cvCreateImage( cvGetSize(thresh_img), 8, 3 );
> 		cvCopy( thresh_img, imageCopy2);
> 		cvCvtColor( imageCopy2, imageCopy22, CV_GRAY2BGR );
> 
> 		for( int kkk = 0; kkk < quad_count; kkk++ )
> 		{
> 			CvCBQuad* print_quad = &quads[kkk];
> 			CvPoint pt[4];
> 			pt[0].x = (int)print_quad->corners[0]->pt.x;
> 			pt[0].y = (int)print_quad->corners[0]->pt.y;
> 			pt[1].x = (int)print_quad->corners[1]->pt.x;
> 			pt[1].y = (int)print_quad->corners[1]->pt.y;
> 			pt[2].x = (int)print_quad->corners[2]->pt.x;
> 			pt[2].y = (int)print_quad->corners[2]->pt.y;
> 			pt[3].x = (int)print_quad->corners[3]->pt.x;
> 			pt[3].y = (int)print_quad->corners[3]->pt.y;
> 			cvLine( imageCopy22, pt[0], pt[1], CV_RGB(255,255,0), 1, 8 );
> 			cvLine( imageCopy22, pt[1], pt[2], CV_RGB(255,255,0), 1, 8 );
> 			cvLine( imageCopy22, pt[2], pt[3], CV_RGB(255,255,0), 1, 8 );
> 			cvLine( imageCopy22, pt[3], pt[0], CV_RGB(255,255,0), 1, 8 );
> 		}
> 		cvShowImage( "all found quads per dilation run", imageCopy22);
> 		//cvSaveImage("pictureVis/allFoundQuads.png", imageCopy22);
> 		cvWaitKey(0);
> #endif
> //END------------------------------------------------------------------------
> 
> 		
>         // The following function finds and assigns neighbor quads to every 
> 		// quadrangle in the immediate vicinity fulfilling certain 
> 		// prerequisites
>         CV_CALL( mrFindQuadNeighbors2( quads, quad_count, dilations));
> 		
> //VISUALIZATION--------------------------------------------------------------
> #if VIS
> 		cvNamedWindow( "quads with neighbors", 1 );
> 		IplImage* imageCopy3 = cvCreateImage( cvGetSize(thresh_img), 8, 3 );
> 		cvCopy( imageCopy22, imageCopy3);
> 		CvPoint pt;
> 		int scale = 0;
> 		int line_type = CV_AA;
> 		CvScalar color = {{0,0,255}};
> 		for( int kkk = 0; kkk < quad_count; kkk++ )
> 		{
> 			CvCBQuad* print_quad2 = &quads[kkk];
> 			for( int kkkk = 0; kkkk < 4; kkkk++ )
> 			{
> 				if( print_quad2->neighbors[kkkk] )
> 				{
> 					pt.x = (int)(print_quad2->corners[kkkk]->pt.x);
> 					pt.y = (int)(print_quad2->corners[kkkk]->pt.y);
> 					cvCircle( imageCopy3, pt, 3, color, 1, line_type, scale);
> 				}
> 			}
> 		}
> 		cvShowImage( "quads with neighbors", imageCopy3);
> 		//cvSaveImage("pictureVis/allFoundNeighbors.png", imageCopy3);
> 		cvWaitKey(0);
> #endif
> //END------------------------------------------------------------------------
> 
> 
> 		// Allocate memory
>         CV_CALL( quad_group = (CvCBQuad**)cvAlloc( sizeof(quad_group[0]) * quad_count));
>         CV_CALL( corner_group = (CvCBCorner**)cvAlloc( sizeof(corner_group[0]) * quad_count*4 ));
> 
> 
> 		// The connected quads will be organized in groups. The following loop
> 		// increases a "group_idx" identifier.
> 		// The function "icvFindConnectedQuads assigns all connected quads
> 		// a unique group ID.
> 		// If more quadrangles were assigned to a given group (i.e. connected)
> 		// than are expected by the input variable "pattern_size", the 
> 		// function "icvCleanFoundConnectedQuads" erases the surplus
> 		// quadrangles by minimizing the convex hull of the remaining pattern.
>         for( group_idx = 0; ; group_idx++ )
>         {
>             int count;
>             CV_CALL( count = icvFindConnectedQuads( quads, quad_count, quad_group, group_idx, storage, dilations ));
> 
>             if( count == 0 )
>                 break;
>         
> 			CV_CALL( count = icvCleanFoundConnectedQuads( count, quad_group, pattern_size ));
> 
> 
> 			// MARTIN's Code
> 			// To save computational time, only proceed, if the number of
> 			// found quads during this dilation run is larger than the 
> 			// largest previous found number
> 			if( count >= max_count)
> 			{
> 				// set max_count to its new value
> 				max_count = count;
> 				max_dilation_run_ID = dilations;
> 			
> 				// The following function labels all corners of every quad 
> 				// with a row and column entry.
> 				// "count" specifies the number of found quads in "quad_group"
> 				// with group identifier "group_idx"
> 				// The last parameter is set to "true", because this is the
> 				// first function call and some initializations need to be
> 				// made.
> 				mrLabelQuadGroup( quad_group, max_count, pattern_size, true );
> 				
> 
> //VISUALIZATION--------------------------------------------------------------
> #if VIS
> 				// display all corners in INCREASING ROW AND COLUMN ORDER
> 				cvNamedWindow( "Corners in increasing order", 1 );
> 				IplImage* imageCopy11 = cvCreateImage( cvGetSize(thresh_img), 8, 3 );
> 				cvCopy( imageCopy22, imageCopy11);
> 				// Assume min and max rows here, since we are outside of the
> 				// relevant function
> 				int min_row = -15;
> 				int max_row = 15;
> 				int min_column = -15;
> 				int max_column = 15;
> 				for(int i = min_row; i <= max_row; i++)
> 				{
> 						for(int j = min_column; j <= max_column; j++)
> 						{
> 							for(int k = 0; k < count; k++)
> 							{
> 								for(int l = 0; l < 4; l++)
> 								{
> 									if( ((quad_group[k])->corners[l]->row == i) && ((quad_group[k])->corners[l]->column == j) )
> 									{
> 										// draw the row and column numbers
> 										char str[255];
> 										sprintf(str,"%i/%i",i,j);
> 										CvFont font;
> 										cvInitFont(&font, CV_FONT_HERSHEY_SIMPLEX, 0.2, 0.2, 0, 1);
> 										CvPoint ptt;
> 										ptt.x = (int) quad_group[k]->corners[l]->pt.x;
> 										ptt.y = (int) quad_group[k]->corners[l]->pt.y;
> 										// Mark central corners with a different color than 
> 										// border corners
> 										if ((quad_group[k])->corners[l]->needsNeighbor == false)
> 										{
> 											cvPutText(imageCopy11, str, ptt, &font, CV_RGB(0,255,0));
> 										}
> 										else
> 										{
> 											cvPutText(imageCopy11, str, ptt, &font, CV_RGB(255,0,0));
> 										}
> 										cvShowImage( "Corners in increasing order", imageCopy11);
> 										//cvSaveImage("pictureVis/CornersIncreasingOrder.tif", imageCopy11);
> 										//cvWaitKey(0);
> 									}
> 								}
> 							}
> 						}
> 				}
> 				cvWaitKey(0);
> #endif
> //END------------------------------------------------------------------------
> 
> 	
> 				// Allocate memory
> 				CV_CALL( output_quad_group = (CvCBQuad**)cvAlloc( sizeof(output_quad_group[0]) * ((pattern_size.height+2) * (pattern_size.width+2)) ));
> 				
> 				
> 				// The following function copies every member of "quad_group"
> 				// to "output_quad_group", because "quad_group" will be 
> 				// overwritten during the next loop pass.
> 				// "output_quad_group" is a true copy of "quad_group" and 
> 				// later used for output
> 				mrCopyQuadGroup( quad_group, output_quad_group, max_count );
> 			}
>         }
> 		
> 
> 		// Free the allocated variables
>         cvFree( &quads );
>         cvFree( &corners );
>     }
> 	
> 
> // EVALUATE TIMER
> #if TIMER
> 	float time1 = (float) (clock() - start_time) / CLOCKS_PER_SEC;
> 	FindChessboardCorners2.open("timer/FindChessboardCorners2.txt", ofstream::app);
> 	FindChessboardCorners2 << "Time 1 for cvFindChessboardCorners2 was " << time1 << " seconds." << endl;
> #endif
> 
> 	// If enough corners have been found already, then there is no need for PART 2 ->EXIT
> 	found = mrWriteCorners( output_quad_group, max_count, pattern_size, min_number_of_corners);
> 		if (found == -1 || found == 1)
> 			EXIT;
> 
> 	// PART 2: AUGMENT LARGEST PATTERN
> 	//-----------------------------------------------------------------------
> 	// Instead of saving all found quads of all dilation runs from PART 1, we
> 	// just recompute them again, but skipping the dilation run which 
> 	// produced the maximum number of found quadrangles.
> 	// In essence the first section of PART 2 is identical to the first
> 	// section of PART 1.
>     for( dilations = max_dilations; dilations >= min_dilations; dilations-- )
>     {
> 		//if(max_dilation_run_ID == dilations)
> 		//	continue;
>         
> 		// Calling "cvCopy" again is much faster than rerunning "cvAdaptiveThreshold"
> 		cvCopy( thresh_img_save, thresh_img);
>         
> 		IplConvKernel *kernel1 = cvCreateStructuringElementEx(3,3,1,1,CV_SHAPE_CROSS,NULL);
> 		IplConvKernel *kernel2 = cvCreateStructuringElementEx(3,3,1,1,CV_SHAPE_RECT,NULL);
> 
>         if (dilations >= 1)
> 			cvDilate( thresh_img, thresh_img, kernel1, 1);
> 		if (dilations >= 2)
> 			cvDilate( thresh_img, thresh_img, kernel2, 1);
> 		if (dilations >= 3)
> 			cvDilate( thresh_img, thresh_img, kernel1, 1);
> 		if (dilations >= 4)
> 			cvDilate( thresh_img, thresh_img, kernel2, 1);
> 		if (dilations >= 5)
> 			cvDilate( thresh_img, thresh_img, kernel1, 1);
> 		if (dilations >= 6)
> 			cvDilate( thresh_img, thresh_img, kernel2, 1);
>     
>         cvRectangle( thresh_img, cvPoint(0,0), cvPoint(thresh_img->cols-1,
>                      thresh_img->rows-1), CV_RGB(255,255,255), 3, 8);
> 
> //VISUALIZATION--------------------------------------------------------------
> #if VIS
> 		cvNamedWindow( "PART2: Starting Point", 1 );
> 		IplImage* imageCopy23 = cvCreateImage( cvGetSize(thresh_img), 8, 3 );
> 		cvCvtColor( thresh_img, imageCopy23, CV_GRAY2BGR );
> 		
> 		CvPoint *pt = new CvPoint[4];
> 		for( int kkk = 0; kkk < max_count; kkk++ )
> 		{ 
> 			CvCBQuad* print_quad2 = output_quad_group[kkk];
> 			for( int kkkk = 0; kkkk < 4; kkkk++ )
> 			{
> 				pt[kkkk].x = (int) print_quad2->corners[kkkk]->pt.x;
> 				pt[kkkk].y = (int) print_quad2->corners[kkkk]->pt.y;
> 			}
> 			// draw a filled polygon
> 			cvFillConvexPoly ( imageCopy23, pt, 4, CV_RGB(255*0.1,255*0.25,255*0.6));
141a581,671
> 		// indicate the dilation run
> 		char str[255];
> 		sprintf(str,"Dilation Run No.: %i",dilations);
> 		CvFont font;
> 		cvInitFont(&font, CV_FONT_HERSHEY_SIMPLEX, 0.5, 0.5, 0, 2);
> 		//cvPutText(imageCopy23, str, cvPoint(20,20), &font, CV_RGB(0,255,0));
> 
> 		cvShowImage( "PART2: Starting Point", imageCopy23);
> 		cvSaveImage("pictureVis/part2Start.png", imageCopy23);
> 		cvWaitKey(0);
> #endif
> //END------------------------------------------------------------------------
> 
> 
>         CV_CALL( quad_count = icvGenerateQuads( &quads, &corners, storage, thresh_img, flags, dilations, false ));
>         if( quad_count <= 0 )
>             continue;
> 			
> 
> //VISUALIZATION--------------------------------------------------------------
> #if VIS
> 		//draw on top of previous image
> 		for( int kkk = 0; kkk < quad_count; kkk++ )
> 		{
> 			CvCBQuad* print_quad = &quads[kkk];
> 
> 			CvPoint pt[4];
> 			pt[0].x = (int)print_quad->corners[0]->pt.x;
> 			pt[0].y = (int)print_quad->corners[0]->pt.y;
> 			pt[1].x = (int)print_quad->corners[1]->pt.x;
> 			pt[1].y = (int)print_quad->corners[1]->pt.y;
> 			pt[2].x = (int)print_quad->corners[2]->pt.x;
> 			pt[2].y = (int)print_quad->corners[2]->pt.y;
> 			pt[3].x = (int)print_quad->corners[3]->pt.x;
> 			pt[3].y = (int)print_quad->corners[3]->pt.y;
> 			cvLine( imageCopy23, pt[0], pt[1], CV_RGB(255,0,0), 1, 8 );
> 			cvLine( imageCopy23, pt[1], pt[2], CV_RGB(255,0,0), 1, 8 );
> 			cvLine( imageCopy23, pt[2], pt[3], CV_RGB(255,0,0), 1, 8 );
> 			cvLine( imageCopy23, pt[3], pt[0], CV_RGB(255,0,0), 1, 8 );
> 			//compute center of print_quad
> 			int x1 = (pt[0].x + pt[1].x)/2;
> 			int y1 = (pt[0].y + pt[1].y)/2;
> 			int x2 = (pt[2].x + pt[3].x)/2;
> 			int y2 = (pt[2].y + pt[3].y)/2;
> 			
> 			int x3 = (x1 + x2)/2;
> 			int y3 = (y1 + y2)/2;
> 			// indicate the quad number in the image
> 			char str[255];
> 			sprintf(str,"%i",kkk);
> 			//CvFont font;
> 			//cvInitFont(&font, CV_FONT_HERSHEY_SIMPLEX, 0.5, 0.5, 0, 1);
> 			//cvPutText(imageCopy23, str, cvPoint(x3,y3), &font, CV_RGB(0,255,255));
> 		}
> 
> 		for( int kkk = 0; kkk < max_count; kkk++ )
> 		{
> 			CvCBQuad* print_quad = output_quad_group[kkk];
> 
> 			CvPoint pt[4];
> 			pt[0].x = (int)print_quad->corners[0]->pt.x;
> 			pt[0].y = (int)print_quad->corners[0]->pt.y;
> 			pt[1].x = (int)print_quad->corners[1]->pt.x;
> 			pt[1].y = (int)print_quad->corners[1]->pt.y;
> 			pt[2].x = (int)print_quad->corners[2]->pt.x;
> 			pt[2].y = (int)print_quad->corners[2]->pt.y;
> 			pt[3].x = (int)print_quad->corners[3]->pt.x;
> 			pt[3].y = (int)print_quad->corners[3]->pt.y;
> 			//compute center of print_quad
> 			int x1 = (pt[0].x + pt[1].x)/2;
> 			int y1 = (pt[0].y + pt[1].y)/2;
> 			int x2 = (pt[2].x + pt[3].x)/2;
> 			int y2 = (pt[2].y + pt[3].y)/2;
> 			
> 			int x3 = (x1 + x2)/2;
> 			int y3 = (y1 + y2)/2;
> 
> 			// indicate the quad number in the image
> 			char str[255];
> 			sprintf(str,"%i",kkk);
> 			//CvFont font;
> 			//cvInitFont(&font, CV_FONT_HERSHEY_SIMPLEX, 0.5, 0.5, 0, 1);
> 			//cvPutText(imageCopy23, str, cvPoint(x3,y3), &font, CV_RGB(0,0,0));
> 		}
> 
> 		cvShowImage( "PART2: Starting Point", imageCopy23);
> 		cvSaveImage("pictureVis/part2StartAndNewQuads.png", imageCopy23);
> 		cvWaitKey(0);
> #endif
> //END------------------------------------------------------------------------
> 
143,149c673,760
< 		cornersX << point_buf[i].x;
< 		cornersY << point_buf[i].y;
< 		last_x = point_buf[i].x;
< 
< 		if (i <= point_buf.size() - 1 && point_buf[i+1].x > last_x) {
< 			cornersX << " ";
< 			cornersY << " ";
---
> 		// MARTIN's Code
> 		// The following loop is executed until no more newly found quads
> 		// can be matched to one of the border corners of the largest found
> 		// pattern from PART 1.
> 		// The function "mrAugmentBestRun" tests whether a quad can be linked
> 		// to the existng pattern.
> 		// The function "mrLabelQuadGroup" then labels the newly added corners
> 		// with the respective row and column entries.
> 		int feedBack = -1;
> 		while ( feedBack == -1)
> 		{
> 			feedBack = mrAugmentBestRun( quads, quad_count, dilations, 
>             							 output_quad_group, max_count, max_dilation_run_ID );
> 			
> 
> //VISUALIZATION--------------------------------------------------------------
> #if VIS
> 			if( feedBack == -1)
> 			{
> 				CvCBQuad* remember_quad;
> 				for( int kkk = max_count; kkk < max_count+1; kkk++ )
> 				{
> 					CvCBQuad* print_quad = output_quad_group[kkk];
> 					remember_quad = print_quad;
> 					CvPoint pt[4];
> 					pt[0].x = (int)print_quad->corners[0]->pt.x;
> 					pt[0].y = (int)print_quad->corners[0]->pt.y;
> 					pt[1].x = (int)print_quad->corners[1]->pt.x;
> 					pt[1].y = (int)print_quad->corners[1]->pt.y;
> 					pt[2].x = (int)print_quad->corners[2]->pt.x;
> 					pt[2].y = (int)print_quad->corners[2]->pt.y;
> 					pt[3].x = (int)print_quad->corners[3]->pt.x;
> 					pt[3].y = (int)print_quad->corners[3]->pt.y;
> 					cvLine( imageCopy23, pt[0], pt[1], CV_RGB(255,0,0), 2, 8 );
> 					cvLine( imageCopy23, pt[1], pt[2], CV_RGB(255,0,0), 2, 8 );
> 					cvLine( imageCopy23, pt[2], pt[3], CV_RGB(255,0,0), 2, 8 );
> 					cvLine( imageCopy23, pt[3], pt[0], CV_RGB(255,0,0), 2, 8 );
> 				}
> 
> 				cvWaitKey(0);
> 				// also draw the corner to which it is connected
> 				// Remember it is not yet completely linked!!!
> 				for( int kkk = 0; kkk < max_count; kkk++ )
> 				{
> 					CvCBQuad* print_quad = output_quad_group[kkk];
> 
> 					for( int kkkk = 0; kkkk < 4; kkkk++)
> 					{
> 						if(print_quad->neighbors[kkkk] == remember_quad)
> 						{
> 							CvPoint pt[4];
> 							pt[0].x = (int)print_quad->corners[0]->pt.x;
> 							pt[0].y = (int)print_quad->corners[0]->pt.y;
> 							pt[1].x = (int)print_quad->corners[1]->pt.x;
> 							pt[1].y = (int)print_quad->corners[1]->pt.y;
> 							pt[2].x = (int)print_quad->corners[2]->pt.x;
> 							pt[2].y = (int)print_quad->corners[2]->pt.y;
> 							pt[3].x = (int)print_quad->corners[3]->pt.x;
> 							pt[3].y = (int)print_quad->corners[3]->pt.y;
> 							cvLine( imageCopy23, pt[0], pt[1], CV_RGB(255,0,0), 2, 8 );
> 							cvLine( imageCopy23, pt[1], pt[2], CV_RGB(255,0,0), 2, 8 );
> 							cvLine( imageCopy23, pt[2], pt[3], CV_RGB(255,0,0), 2, 8 );
> 							cvLine( imageCopy23, pt[3], pt[0], CV_RGB(255,0,0), 2, 8 );
> 						}
> 					}
> 				}
> 				cvShowImage( "PART2: Starting Point", imageCopy23);
> 				cvSaveImage("pictureVis/part2StartAndSelectedQuad.png", imageCopy23);
> 				cvWaitKey(0);
> 			}
> #endif
> //END------------------------------------------------------------------------
> 
> 
> 			// if we have found a new matching quad
> 			if (feedBack == -1)
> 			{
> 				// increase max_count by one
> 				max_count = max_count + 1;
>    				mrLabelQuadGroup( output_quad_group, max_count, pattern_size, false );
> 
> 
> 				// write the found corners to output array
> 				// Go to __END__, if enough corners have been found
> 				found = mrWriteCorners( output_quad_group, max_count, pattern_size, min_number_of_corners);
> 				if (found == -1 || found == 1)
> 					EXIT;
> 			}
152,159d762
< 	cornersX << std::endl;
< 	cornersY << std::endl;
< 	cornersX.close();
< 	cornersY.close();
< 
< 	ofstream cornerInfo("cToMatlab/cornerInfo.txt");
< 	cornerInfo << pattern_size.height << " " << pattern_size.width << std::endl;
< 	cornerInfo.close();
161c764,792
< 	ofstream error("cToMatlab/error.txt");
---
> 
> 	// "End of file" jump point
> 	// After the command "EXIT" the code jumps here
>     __END__;
> 
> 
> 	/*
> 	// MARTIN:
> 	found = mrWriteCorners( output_quad_group, max_count, pattern_size, min_number_of_corners);
> 	*/
> 
> 	// If a linking problem was encountered, throw an error message
>     if( found == -1 )
> 	{
>         error << "While linking the corners a problem was encountered. No corner sequence is returned. " << endl;
> 		error.close();
> 		return -1;
> 	}
> 
> 
> 	// Release allocated memory
>     cvReleaseMemStorage( &storage );
>     cvReleaseMat( &norm_img );
>     cvReleaseMat( &thresh_img );
>     cvFree( &quads );
>     cvFree( &corners );
>     cvFree( &quad_group );
>     cvFree( &corner_group );
> 	cvFree( &output_quad_group );
164c795,807
< 	return found;
---
> // EVALUATE TIMER
> #if TIMER
> 	float time3 = (float) (clock() - start_time) / CLOCKS_PER_SEC;
> 	FindChessboardCorners2 << "Time 3 for cvFindChessboardCorners2 was " << time3 << " seconds." << endl;
> 	FindChessboardCorners2.close();
> #endif
> 
> 	// Return found
> 	// Found can have the values
> 	// -1  ->	Error or corner linking problem, see error.txt for more information
> 	//  0  ->	Not enough corners were found
> 	//  1  ->	Enough corners were found
>     return found;
174c817
< icvCleanFoundConnectedQuads( int quad_count, CvCBQuad **quad_group, cv::Size pattern_size )
---
> icvCleanFoundConnectedQuads( int quad_count, CvCBQuad **quad_group, CvSize pattern_size )
181c824
<     __CV_BEGIN__;
---
>     __BEGIN__;
195c838
<         __CV_EXIT__;
---
>         EXIT;
292c935
<     __CV_END__;
---
>     __END__;
1447c2090
<     __CV_BEGIN__;
---
>     __BEGIN__;
1600c2243
<     __CV_END__;
---
>     __END__;
